import { Autocomplete, Button, Chip, Stack, TextField } from "@mui/material";
import Head from "next/head";
import { useRouter } from "next/router";
import React, { useEffect } from "react";
import { MinecraftHeadViewer } from "~/HeadViewer";
import { api } from "~/utils/api";
import { ZodHeadsRowObject, ZodHeadsTagsRowsObject } from "~/zod";

export default function Home() {
  const router = useRouter()

  const { data: dbData } = api.db.get.useQuery(parseInt(router.query.id as string))
  const { data: tagsData } = api.db.tags.useQuery();
  const update = api.db.update.useMutation()

  const tags = tagsData?.results.rows.map((v) => ZodHeadsTagsRowsObject.parse(v))
  const tagsNames = tags?.map((v) => v.heads_tags_name)

  const [headName, setHeadName] = React.useState("")
  const [headTags, setHeadTags] = React.useState<string[]>([])
  const [headKey, setHeadKey] = React.useState("")

  useEffect(() => {
    if (!dbData || !tagsData) return
    const obj = ZodHeadsRowObject.parse(dbData!.results.rows[0]);
    setHeadTags(obj.heads_tags.split(";"))
  }, [dbData, tagsData])

  function changeHandle(event: React.SyntheticEvent<Element, Event>, value: string) {
    // if the value is the same as the name of a tag, add the tag with setHeadTags
    if (tagsNames?.includes(value)) {
      // add without duplicates
      if (!headTags.includes(value)) {
        setHeadTags([...headTags, value])
      }
    }
  }

  function handleValidate(obj: {
    heads_id: number;
    heads_key: string;
    heads_name: string;
  }) {
    const id = obj.heads_id
    const name = headName === "" ? obj.heads_name : headName
    const tags = headTags
    const key = headKey === "" ? obj.heads_key : headKey

    update.mutate({ id, name, tags, key })
    return true
  }

  return (
    <>
      <Head>
        <title>- Deco -</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center bg-gradient-to-b bg-stone-950 text-white p-4">
        <h1 className="text-4xl font-bold p-2">
          Deco - Heads
        </h1>
        <div className="container bg-stone-900 m-1 flex p-2 rounded-md">
          {(() => {
            if (!dbData || !tagsData) return "Loading..."

            try {
              const tagsNamesWithoutChosen = tagsNames?.filter((v) => !headTags.includes(v))
              const obj = ZodHeadsRowObject.parse(dbData!.results.rows[0]);

              return (
                <div className="flex">
                  <div className="flex flex-col items-center">
                    <MinecraftHeadViewer
                      skin={"http://textures.minecraft.net/texture/" + obj.heads_key}
                      width={300}
                      height={300}
                    />
                    <Stack spacing={2} sx={{ width: 300 }}>
                      <TextField id="standard-basic" label="Title" variant="standard" defaultValue={obj.heads_name} onChange={(e) => setHeadName(e.target.value)} />
                      <TextField id="standard-basic" label="Key" variant="standard" defaultValue={obj.heads_key} onChange={(e) => setHeadKey(e.target.value)} />
                      <Autocomplete
                        freeSolo
                        id="free-solo-2-demo"
                        options={tagsNamesWithoutChosen!}
                        disableClearable
                        onChange={changeHandle}
                        renderInput={(params) => (
                          <TextField
                            {...params}
                            label="Add tags"
                            InputProps={{
                              ...params.InputProps,
                              type: 'search',
                            }}
                          />
                        )}
                      />
                    </Stack>
                  </div>
                  <div className="flex flex-col">
                    <div className="flex flex-col grow-0">
                      <span>
                        headName: {headName}
                      </span>
                      <span>
                        headTags: {headTags.map((v) => <Chip variant="outlined" onDelete={() => setHeadTags(headTags.filter((v2) => v2 !== v))} label={v} />)} 
                      </span>
                    </div>
                    <div className="grow flex flex-col-reverse">
                      <Button variant="contained" onClick={() => handleValidate(obj)}>Validate</Button>
                    </div>
                  </div>
                </div>
              )
            } catch {
              "Error"
            }
          })()}
        </div>
      </main>
    </>
  );
}