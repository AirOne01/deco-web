import { Box, Button, FormControlLabel, FormGroup, LinearProgress, Modal, Switch } from "@mui/material";
import Head from "next/head";
import { api } from "~/utils/api";
import React from "react";
import { ZodHeadsRowObject } from "~/zod";
import Link from "next/link";
import Image from "next/image";
import { SignInButton, SignedIn, SignedOut, UserButton } from "@clerk/nextjs";
import { ImportIcon, LogInIcon, SettingsIcon, SmilePlusIcon } from "lucide-react";

export default function Home() {
  const { data: dbData } = api.db.getAll.useQuery();
  const [detailsOpened, setDetailsOpened] = React.useState(false);

  const [modalOpened, setModalOpened] = React.useState(false);
  const [rightSide, setRightSide] = React.useState(false);
  const [noHelm, setNoHelm] = React.useState(false);

  return (
    <>
      <Head>
        <title>- Deco -</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header className="bg-stone-950 flex items-center justify-between pr-4 text-white">
        <Link href="/">
          <Image
            src="/logo.png"
            alt="Deco logo"
            width={100}
            height={100}
            className="w-12 h-12"
          />
        </Link>
        <div className="flex gap-2">
          <button onClick={() => setModalOpened(true)} className="border-stone-700 border rounded-full p-1.5 w-8 h-8">
            <SettingsIcon className="w-full h-full"/>
          </button>
          <SignedIn>
            <UserButton
              afterSignOutUrl="/"
              appearance={{
                elements: {
                  userButtonPopoverCard: 'py-2 bg-stone-900 text-stone-100',
                  userPreview: 'px-2',
                  userPreviewSecondaryIdentifier: 'text-stone-500',
                  userButtonPopoverActionButton: 'p-2 text-stone-100 hover:bg-stone-800',
                  userButtonPopoverActionButtonText: 'text-stone-100',
                  userButtonPopoverActionButtonIconBox: 'stroke-stone-100 fill-stone-100',
                  userButtonPopoverFooter: 'px-5 pt-1.5',
                }
              }}
            />
          </SignedIn>
        </div>
        <SignedOut>
          <SignInButton
            afterSignInUrl="/"
            mode="modal"
          >
            <button className="border-stone-700 border rounded-full p-1.5 w-8 h-8">
              <LogInIcon className="w-full h-full"/>
            </button>
          </SignInButton>
        </SignedOut>
      </header>
      <main className="flex min-h-screen flex-col items-center bg-gradient-to-b bg-stone-950 text-white p-4">
        <Modal
          open={modalOpened}
          onClose={() => setModalOpened(false)}
          aria-labelledby="modal-modal-title"
          aria-describedby="modal-modal-description"
        >
          <Box className="top-1/2 left-1/2 absolute bg-stone-900 rounded-md p-4">
            <h1 className="text-2xl font-bold p-2">
              Settings
            </h1>
            <FormGroup>
              <FormControlLabel control={
                <Switch checked={rightSide} onChange={(e) => setRightSide(!rightSide)} />
              } label="Right-sided heads" />
              <FormControlLabel control={
                <Switch checked={noHelm} onChange={(e) => setNoHelm(!noHelm)} />
              } label="No helmet (2nd layer of skin)" />
            </FormGroup>
          </Box>
        </Modal>
        <h1 className="text-4xl font-bold p-2">
          Deco - Heads
        </h1>
        <div className={`container bg-stone-900 m-1 grid-cols-10 rounded-md overflow-hidden grow ${!dbData ? 'p-0 flex flex-col' : 'grid p-2 gap-2' }`}>
          {!dbData && <LinearProgress className="w-full" />}
          {dbData && <SignedIn>
            <Link href="/edit/new" className="flex flex-col items-center justify-start">
                <SmilePlusIcon className="h-[106px] aspect-square w-fit p-4" />
                <div className="text-stone-300 underline text-center">
                  New head
                </div>
            </Link>
            <Link href="/edit/import" className="flex flex-col items-center justify-start">
                <ImportIcon className="h-[106px] aspect-square w-fit p-4" />
                <div className="text-stone-300 underline text-center">
                  Import heads
                </div>
            </Link>
          </SignedIn>}
          {dbData?.results.rows.map((item) => {
            try {
              const obj = ZodHeadsRowObject.parse(item);

              let src = `https://mc-heads.net/head/` + obj.heads_key + `/100`;
              if (rightSide) {
                src += "/left"
              }
              if (noHelm) {
                src += "/nohelm"
              }

              return <Link href={`/edit/${obj.heads_id}`} key={obj.heads_id} className="flex flex-col items-center justify-start">
                <Image
                  src={src}
                  alt={obj.heads_name}
                  width={100}
                  height={100}
                  loading="lazy"
                  unselectable="on"
                />
                <div className="text-stone-300 underline text-center">
                  {obj.heads_name}
                </div>
              </Link>
            } catch (err) {
              console.error(err);
              return "There was an error"
            }
          })}
        </div>
        <SignedIn>
          <div className="container bg-stone-900 m-1 p-2 rounded-md flex flex-col">
            <Button onClick={() => setDetailsOpened(!detailsOpened)} className="w-fit">
              {detailsOpened ? "Hide" : "Show"} JSON
            </Button>
            {detailsOpened && (
              <p className="container bg-stone-950 p-2 rounded-md whitespace-pre">
                {JSON.stringify(dbData?.results.rows, null, 2)}
              </p>
            )}
          </div>
        </SignedIn>
      </main>
    </>
  );
}
